<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.springboot_collegelibrary.mapper.AdminCommandMapper">
    <!--    Book Management -->
    <select id="searchBookDetailByKeyword" resultType="com.example.springboot_collegelibrary.entity.BookTableEntity" parameterType="String">
        select
            *
        from
            book
        where bookId Like CONCAT('%', #{keyword}, '%')
           or bookTitle Like CONCAT('%', #{keyword}, '%')
           or bookAuthor Like CONCAT('%', #{keyword}, '%')
    </select>

    <select id="getBookDetailByBookId" resultType="com.example.springboot_collegelibrary.entity.BookTableEntity" parameterType="String">
        select
            *
        from
            book
        where
            bookId = #{bookId}
    </select>

    <select id = "getBorrowingBookByBookId" resultType="com.example.springboot_collegelibrary.entity.BorrowedBookTableEntity" parameterType="String">
        select
            *
        from
            borrowedbook
        where
            bookId = #{bookId} and returnedDate is null
    </select>

    <select id = "getBorrowedBookByBookId" resultType="com.example.springboot_collegelibrary.entity.BorrowedBookTableEntity" parameterType="String">
        select
            *
        from
            borrowedbook
        where
            bookId = #{bookId} and returnedDate is not null
    </select>

    <select id="getLatefeesByBookId" resultType="com.example.springboot_collegelibrary.entity.LateFeesTableEntity" parameterType="String">
        select
            *
        from
            latefees
        where
            bookId = #{bookId}
    </select>

    <update id="increaseTotalQuantityOfBook" parameterType="String">
        update
            book
        set
            bookQuantity = bookQuantity + 1,
            bookAvailable = bookAvailable + 1
        where
            bookId = #{bookId}
    </update>
    <update id="decreaseTotalQuantityOfBook" parameterType="String">
        update
            book
        set
            bookQuantity = bookQuantity - 1,
            bookAvailable= bookAvailable -1
        where
            bookId = #{bookId} and bookAvailable>0
    </update>

    <insert id="insertNewBook" parameterType="com.example.springboot_collegelibrary.entity.BookTableEntity">
        insert into book
            (bookId, bookTitle, bookAuthor, bookQuantity, bookAvailable,bookPrice)
        values
            (#{bookId}, #{bookTitle}, #{bookAuthor}, #{bookQuantity}, #{bookAvailable}, #{bookPrice})
    </insert>

    <select id="getAdminBookOverdueList" resultType="com.example.springboot_collegelibrary.dto.AdminBookBorrowDTO">
        select
            a.bookId, a.bookTitle, a.bookAuthor, b.borrowedDate, b.dueDate, c.studentNUmber, c.studentEmail, c.studentName, c.studentPhone
        from
            book a right outer join borrowedbook b
                                    on
                                        a.bookId = b.bookId
                   inner join student c
                              on
                                  b.studentEmail = c.studentEmail
        where
            b.returnedDate is null and
            cast(current_timestamp() as DATE)>CAST(dueDate as DATE)
        order by borrowedDate desc
    </select>

    <select id="getAdminBookBorrowList" resultType="com.example.springboot_collegelibrary.dto.AdminBookBorrowDTO">
        select
            a.bookId, a.bookTitle, a.bookAuthor, b.borrowedDate, b.dueDate, c.studentNUmber, c.studentEmail, c.studentName, c.studentPhone
        from
            book a right outer join borrowedbook b
                                    on
                                        a.bookId = b.bookId
                   inner join student c
                              on
                                  b.studentEmail = c.studentEmail
        where
            b.returnedDate is null and
        CAST(dueDate as DATE) >= cast(current_timestamp() as DATE)
        order by borrowedDate desc
    </select>

    <select id="getAdminBookBorrowedList" resultType="com.example.springboot_collegelibrary.dto.AdminBookBorrowedDTO">
        select
            a.bookId, a.bookTitle, a.bookAuthor, b.borrowedDate, b.returnedDate , c.studentNUmber, c.studentEmail, c.studentName, c.studentPhone
        from
            book a right outer join borrowedbook b
                                    on
                                        a.bookId = b.bookId
                   inner join student c
                              on
                                  b.studentEmail = c.studentEmail
        where
            b.returnedDate is not null
        order by borrowedDate desc
    </select>



</mapper>